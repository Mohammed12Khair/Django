refrence 


{% if xdf = 0 %}
<script> 
var A = new L.LatLng({{ A[i] }});
var B = new L.LatLng({{ B[i] }});
var list = [A, B];

var firstpolyline = new L.Polyline(list, {
    color: 'red',
    weight: 3,
    opacity: 0.5,
    smoothFactor: 1
});
firstpolyline.addTo(map);


</script>
{% endif %}


-----------bkup of html 23-Sep
<!--<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Style lines with a data-driven property</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin:0; padding:0; }
        #map { position:absolute; top:0; bottom:0; width:100%; }
    </style>
</head>
<body>

<div id='map'></div>
<script>
mapboxgl.accessToken = 'pk.eyJ1IjoibW9oYW1tZWRraGFpciIsImEiOiJjazExN203dG0wMGRuM2tvZDQzN3J5eGR1In0.ySsFuo7X5EiknFrPvUhQAQ';
var map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v11',
    center: [-122.48383155304096, 37.82882682974591],
    zoom: 16
});

map.on('load', function() {
    map.addLayer({
        'id': 'lines',
        'type': 'line',
        'source': {
            'type': 'geojson',
            'data': {
                'type': 'FeatureCollection',
                'features': [{
                    'type': 'Feature',
                    'properties': { 'color': '#F7455D' },  'geometry': {'type': 'LineString',
                        'coordinates': [[-122.48393028974533, 37.829471820141016],[-122.4830961227417, 37.82932776098012],]
                    }
                }, {
                    'type': 'Feature',
                    'properties': {
                        'color': '#FF0000' // red
                    },
                    'geometry': {
                        'type': 'LineString',
                        'coordinates': [
                            [-122.48393028974533, 37.829471820141016],
                            [-122.48595803976059, 37.82788927246246],]
                    }
                }]
            }
        },
        'paint': {
            'line-width': 3,
            // Use a get expression (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-get)
            // to set the line-color to a feature property value.
            'line-color': ['get', 'color']
        }
    });

});
</script>

</body>
</html>

-->

<!-- <!DOCTYPE html>
<html>
  <head>
    <title>Interactive maps for Django web apps</title>
    <script src='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css' rel='stylesheet' />
  </head>
  <body>
   <h1>Map time!</h1>
   <div id='map' width="100%" style='height:400px'></div>
   <script>
    mapboxgl.accessToken ='pk.eyJ1IjoibW9oYW1tZWRraGFpciIsImEiOiJjazExN203dG0wMGRuM2tvZDQzN3J5eGR1In0.ySsFuo7X5EiknFrPvUhQAQ';
    var map = new mapboxgl.Map({
     container: 'map',
    // style: 'mapbox://styles/mapbox/streets-v10'
    
         style: 'mapbox://styles/mapbox/satellite-streets-v10',
     center: [-77.03, 38.91],
     zoom: 9,
     bearing: 180


    });
   </script>
  </body>
</html>campsite -->

<!--
<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<title>Draw GeoJSON points</title>
<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
<style>
body { margin:0; padding:0; }
#map { position:absolute; top:0; bottom:0; width:100%; }
</style>
</head>
<body>
 
<div id='map'></div>
<script>
mapboxgl.accessToken = 'pk.eyJ1IjoibW9oYW1tZWRraGFpciIsImEiOiJjazExN203dG0wMGRuM2tvZDQzN3J5eGR1In0.ySsFuo7X5EiknFrPvUhQAQ';
var map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/mapbox/light-v10',
center: [-96, 37.8],
zoom: 3
});
 
map.on('load', function () {
 
map.addLayer({
"id": "points",
"type": "symbol",
"source": {
"type": "geojson",
"data": {
"type": "FeatureCollection",
"features": [{
"type": "Feature",
"geometry": {
"type": "Point",
"coordinates": [-77.03238901390978, 38.913188059745586]
},
"properties": {
"title": "Mapbox DC",
"icon": "campsite"
}
},

 {
"type": "Feature",
"geometry": {
"type": "Point",
"coordinates": [-77.13238901390978, 38.813188059745586]
},
"properties": {
"title": "Mapbox SF",
"icon": "campsite"
}
}
,

{
"type": "Feature",
"geometry": {
"type": "Point",
"coordinates": [-77.43238901390978, 38.713188059745586]
},
"properties": {
"title": "Mapbox SF",
"icon": "hospital"
}
}

]
}
},
"layout": {
"icon-image": "{icon}-15",
"text-field": "{title}",
"text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
"text-offset": [0, 0.6],
"text-anchor": "top"
}
});
});
</script>
 
</body>
</html>


hospital
campsite
point



<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8' />
<title>Draw GeoJSON points</title>
<meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.js'></script>
<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.3.2/mapbox-gl.css' rel='stylesheet' />
<style>
body { margin:0; padding:0; }
#map { position:absolute; top:0; bottom:0; width:100%; }
</style>
</head>
<body>
 
<div id='map'></div>
<script>
mapboxgl.accessToken = 'pk.eyJ1IjoibW9oYW1tZWRraGFpciIsImEiOiJjazExN203dG0wMGRuM2tvZDQzN3J5eGR1In0.ySsFuo7X5EiknFrPvUhQAQ';
var map = new mapboxgl.Map({
container: 'map',
style: 'mapbox://styles/mapbox/light-v10',
center: [-77.13238901390978, 38.813188059745586],
zoom: 10
});
 
map.on('load', function () {
 
map.addLayer({
"id": "points",
"type": "symbol",
"source": {
"type": "geojson",
"data": {
"type": "FeatureCollection",
"features": [

{"type": "Feature",
"geometry": {"type": "Point","coordinates": [-77.03238901390978, 38.913188059745586]},
"properties": {"title": "A","icon": "america-football"}}

,

{"type": "Feature",
"geometry": {"type": "Point","coordinates": [-77.13238901390978, 38.813188059745586]},
"properties": {"title": "B","icon": "hospital"}}

,

{"type": "Feature",
"geometry": {"type": "Point","coordinates": [-77.99238901390978, 38.993188059745586]},
"properties": {"title": "BZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ","icon": "star-stroked"}}

,

{"type": "Feature",
"geometry": {"type": "Point","coordinates": [-77.43238901390978, 38.713188059745586]},
"properties": {"title": "C","icon": "triangle"}


}]}},
"layout": {
"icon-image": "{icon}-15",
"text-field": "{title} AAAA",
"text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
"text-offset": [0, 0.6],
"text-anchor": "top"
},
});
});
</script>
 
</body>
</html>

-->


<!DOCTYPE html>
<html>
{% load staticfiles %} 
  <head>
        <script src="/static/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="/static/popper/popper.min.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/bootstrap-4.0.0/dist/css/bootstrap.css"/>
    <link rel="stylesheet" type="text/css" href="/static/bootstrap-datepicker-1.6.4-dist/css/bootstrap-datepicker3.css"/>
    <script src="/static/bootstrap-4.0.0/dist/js/bootstrap.js"></script>
    <script src="/static/bootstrap-4.0.0/dist/js/bootstrap-confirmation.min.js"></script>
    <script src="/static/bootstrap-datepicker-1.6.4-dist/js/bootstrap-datepicker.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/bootstrap-datepicker-1.6.4-dist/css/bootstrap-datepicker3.css"/>
    <link rel="stylesheet" href="/static/custom/css/style.css">
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/leaflet.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/leaflet.js"></script>
    <style>
      #map {
        position:absolute;
        left: 0;
        right: 0;
        bottom: 0;
        top:0;


      }
      .custom_l{
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <p><a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a></p>
    <script>
        /*
        alert('{{ center }}')
        alert('{{ site }}')
           */
        
     
      var map = L.map('map').setView([15.2409,32.499], 12.5);
      L.tileLayer('https://api.maptiler.com/maps/streets/{z}/{x}/{y}.png?key=bkYok3K8clVp1P611nOj',{
        tileSize: 512, 
        zoomOffset: -1,
        minZoom: 1,
        attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
        crossOrigin: true
      }).addTo(map);

    var up = L.icon({iconUrl: '/static/icons/up.png',iconSize:[10, 10],});
    var down = L.icon({iconUrl: '/static/icons/down.png',iconSize:[10, 10],});
    // size of the icon
   // shadowSize:   [50, 64], // size of the shadow
  //  iconAnchor:   [22, 94], // point of the icon which will correspond to marker's location
  //  shadowAnchor: [4, 62],  // the same for the shadow
  //  popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor

</script>

{% for i in data %}
<script> 

 
var site  = L.marker([{{ i.site_lat }} , {{ i.site_long }}],{icon: {{ i.site_status }}}).addTo(map);
site.bindPopup("<strong>{{ i.site_id }} </strong>").openPopup(); 
site.bindTooltip("{{ i.site_id }}", {permanent: true, className: "custom_l"}).openTooltip();
site.bindTooltip("{{ i.site_id }}", {permanent: true, className: "custom_l"}).openTooltip();





</script>
{% endfor %}


{%for a,b,c in Z %}
<script>
var A = new L.LatLng({{ a }});
var B = new L.LatLng({{ b }});
var list = [A, B];

var firstpolyline = new L.Polyline(list, {
    color: '{{ c }}',
    weight: 3,
    opacity: 0.5,
    smoothFactor: 1
});
firstpolyline.addTo(map);


</script>

{% endfor %}





<script>




/*    var markera = L.marker([51.5, -0.12])
    .bindTooltip("Test Label", 
    {
        permanent: true, 
        direction: 'right'
    }
).addTo(map);
*/
      /*
      var circle = L.circle([51.508, -0.11], {
    color: 'red',
    fillColor: '#f03',
    fillOpacity: 0.5,
    radius: 500
}).addTo(map);
      circle.bindPopup("<b>Hello world!</b><br>I am a popup.").openPopup();

var greenIcon = L.icon({
    iconUrl: 'VBA.png',
    iconSize:     [38, 95], // size of the icon
    shadowSize:   [50, 64], // size of the shadow
    iconAnchor:   [22, 94], // point of the icon which will correspond to marker's location
    shadowAnchor: [4, 62],  // the same for the shadow
    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
});
L.marker([51.5, -0.09], {icon: greenIcon}).addTo(map);

var pointA = new L.LatLng(51.5, -0.09);
var pointB = new L.LatLng(51.55, -0.095);
var pointC = new L.LatLng(51.59, -1.099);
var pointList = [pointC, pointB,point];

var firstpolyline = new L.Polyline(pointList, {
    color: 'red',
    weight: 3,
    opacity: 0.5,
    smoothFactor: 1
});
firstpolyline.addTo(map);
*/
    </script>
  </body>
</html>
-----------------------------endbkup